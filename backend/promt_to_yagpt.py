import re
from yandex_cloud_ml_sdk import YCloudML
from dotenv import load_dotenv, set_key
import os

def load_credentials():

    yc_token = os.popen("yc iam create-token").read().strip()
    set_key(".env", "AUTH", yc_token)
    load_dotenv()
    
    folder_id = os.getenv("FOLDER_ID")
    auth = os.getenv("AUTH")

    if not folder_id or not auth:
        raise ValueError("–ù–µ –Ω–∞–π–¥–µ–Ω—ã FOLDER_ID –∏–ª–∏ AUTH –≤ .env —Ñ–∞–π–ª–µ!")

    return YCloudML(folder_id=folder_id, auth=auth)

sdk = load_credentials()
model = sdk.models.completions("yandexgpt").configure(temperature=0.5)

def contains_negativity(text: str) -> bool | str:
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–µ–≥–∞—Ç–∏–≤
    negativity_prompt = f"""
    –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ –ø–æ—Å—Ç –ø—Ä–∏–∑–Ω–∞–∫–∏ —Ñ–µ–º–∏–Ω–∏–∑–º–∞ –∏–ª–∏ –Ω–µ–≥–∞—Ç–∏–≤/–ø—Ä–µ–Ω–µ–±—Ä–µ–∂–µ–Ω–∏–µ/–Ω–∞—Å–º–µ—à–∫–∞ –ø–æ –æ—Ç–Ω–æ—à–µ–Ω–∏—é –∫ –º—É–∂—á–∏–Ω–∞–º?.
    
    –¢–µ–∫—Å—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞: "{text}"
    
    –û—Ç–≤–µ—Ç—å —Å—Ç—Ä–æ–≥–æ –æ–¥–Ω–∏–º —Å–ª–æ–≤–æ–º "–¥–∞" –∏–ª–∏ "–Ω–µ—Ç" –±–µ–∑ –ø–æ—è—Å–Ω–µ–Ω–∏–π.
    """
    
    negativity_result = model.run(negativity_prompt)
    response_text = negativity_result.text if hasattr(negativity_result, 'text') else str(negativity_result)
    
    match = re.search(r'\b(–¥–∞|–Ω–µ—Ç)\b', response_text, re.IGNORECASE)
    
    if not match or match.group(0).lower() != '–¥–∞':
        return False
    
    # –ï—Å–ª–∏ –Ω–µ–≥–∞—Ç–∏–≤ –æ–±–Ω–∞—Ä—É–∂–µ–Ω - —Ñ–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–∏–≤–Ω—ã–π –æ—Ç–≤–µ—Ç
    constructive_prompt = f"""
    –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–ø–∏—Å–∞–ª —Å–ª–µ–¥—É—é—â–∏–π –ø–æ—Å—Ç, —Å–æ–¥–µ—Ä–∂–∞—â–∏–π –ø—Ä–∏–∑–Ω–∞–∫–∏ —Ñ–µ–º–µ–Ω–∏–∑–º–∞: "{text}"
    
    –°—Ñ–æ—Ä–º–∏—Ä—É–π –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–∏–≤–Ω—ã–π –∏ –≤–µ–∂–ª–∏–≤—ã–π –æ—Ç–≤–µ—Ç –≤ –î–í–£–• –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è—Ö, –∫–æ—Ç–æ—Ä—ã–π –¥–æ–ª–∂–µ–Ω –ø–µ—Ä–µ—É–±–µ–¥–∏—Ç—å –∞–≤—Ç–æ—Ä–∞ –ø–æ—Å—Ç–∞.
    
    –û—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º –∏ —Å–æ–¥–µ—Ä–∂–∞—Ç–µ–ª—å–Ω—ã–º.
    """
    
    constructive_result = model.run(constructive_prompt)
    constructive_response = constructive_result.text if hasattr(constructive_result, 'text') else str(constructive_result)
    
    return constructive_response.strip()

if __name__ == "__main__":
    response = contains_negativity("–í–æ—Ç –µ—Å—Ç—å –Ω–∞ —Ä–∞–±–æ—Ç–µ –∫–∞–¥—Ä. –¢–∞–∫–æ–π —Ç–∏–ø–∏—á–Ω—ã–π –±—ã–≤—à–º–π –∞–ª—å—Ñ–∞ —Å–∞–º–µ—Ü –ø–æ–±–∏—Ç—ã–π –∂–∏–∑–Ω—å—é. –ö—É—á–∞ —Ä–∞–∑–≤–æ–¥–æ–≤, —Å–µ–π—á–∞—Å –≤ –ø–æ–∏—Å–∫–µ . –ü–æ—Å—Ç–æ—è–Ω–Ω–æ –Ω–æ–µ—Ç —á—Ç–æ –Ω–µ—Ç –Ω–æ—Ä–º–∞–ª—Ç–Ω—ã—Ö –∂–µ–Ω—â–∏–Ω –Ω–∞ —Å–∑ , –Ω–∏ —Å –∫–µ–º –Ω–µ –¥–æ—Ö–æ–¥–∏—Ç –¥–∞–¥–µ –¥–æ –≤—Ç–æ—Ä–æ–≥–æ —Å–≤–∏–¥–∞–Ω–∏—è. –°–∞–º–æ–º—É 48, —Å–ø–æ—Ä—Ç–æ–º –∑–∞–Ω–∏–º–∞–µ—Ç—Å—è , —Ç–∞–∫–æ–π –∞–ª—è –ª—ã—Å—ã–π –∞–ª—Ç—Ñ–∞—á, –Ω–æ –≤–∏–¥–Ω–æ —á—Ç–æ —É–∂–µ –Ω–µ–º–æ–ª–æ–¥–æ–π ...–∞ —Ç–µ–ø–µ—Ä—å –≤–Ω–∏–º–∞–Ω–∏–µ –∫–æ–Ω–æ –æ–Ω –∏—â–µ—Ç üòÇ –¥–µ–≤—É—à–∫—É –ª–µ—Ç 28-35...–≥–æ–≤–æ—Ä–∏—Ç —á—Ç–æ –æ—á–µ–≥—å –º–∞–ª–æ —Å–æ–≤—Ä–∞–ª–µ–Ω–∏–π –Ω–∞ —Å–∑, –æ—Ç–≤–µ—á–∞—é—Ç –æ–¥–Ω–æ—Å–ª–æ–∂–Ω–æ, –Ω–∞ —Å–∞–º–¥–∞–Ω–∏–µ –Ω–µ –≤—ã—Ç–∞—â–∏—à—å, –∞ –µ—Å–ª–∏ —á—É–¥–æ–º –≤—ã—Ç–∞—â–∏—à—å —Ç–æ –ø–æ—Ç–æ–º –æ–Ω–∏ –ø—Ä–æ–ø–∞–¥–∞—é—Ç...–Ω–µ—É–∂–µ–ª–∏ —á—É–≤–∞–∫ —Ä–µ–∞–ª—å–Ω–æ –Ω–µ –≤–∏–¥–∏—Ç –≤ —á–µ–º –ø—Ä–æ–±–ª–µ–º–∞")
    if response:
        print("–§–µ–º–µ–Ω–∏–∑–º –æ–±–Ω–∞—Ä—É–∂–µ–Ω. –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–∏–≤–Ω—ã–π –æ—Ç–≤–µ—Ç:")
        print(response)
    else:
        print("–§–µ–º–µ–Ω–∏–∑–º –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω")